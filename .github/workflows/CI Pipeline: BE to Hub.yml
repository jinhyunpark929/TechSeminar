name: "CI Pipeline: BE to Hub"

#
on:
  push:
    branches: [ main ]

jobs:
  build:
    name: 🔨 Build with Gradle
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: ✅ Checkout source code
        uses: actions/checkout@v4.2.2

      - name: ♻️ Cache Gradle packages
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔨 Gradle build (skip tests)
        run: ./gradlew clean build -x test

      - name: 📦 Upload JAR artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: app-jar
          path: app/build/libs/*.jar

  docker:
    name: 🐳 Docker Build & Push
    needs: build  # build job이 성공해야 docker job 실행
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout source code
        uses: actions/checkout@v4.2.2

      - name: 📥 Download JAR artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: app-jar
          path: .

      - name: 🏷️ Set dynamic Docker tags
        id: meta
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          DATE=$(date +%Y%m%d)
          BRANCH=$(echo ${GITHUB_REF##*/})
          echo "IMAGE_TAG=${BRANCH}-${DATE}-${SHORT_SHA}" >> $GITHUB_ENV

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: ☁️ Build and Push Docker image
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          push: true
          tags: |
            jamie929/spotlink:${{ env.IMAGE_TAG }}
            jamie929/spotlink:latest
          file: ./app/Dockerfile

      - name: ✅ Slack 알림 (성공)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ GitHub Actions 빌드 성공! 🎉 by Spotlink"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ❌ Slack 알림 (실패)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ GitHub Actions 빌드 실패! 확인이 필요합니다."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
